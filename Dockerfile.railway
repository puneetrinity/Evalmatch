FROM node:20.19.0-slim

# Install system dependencies for PDF processing, AI models, and native compilation
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    tesseract-ocr \
    poppler-utils \
    build-essential \
    libc6-dev \
    libcairo2-dev \
    libpango1.0-dev \
    libjpeg-dev \
    libgif-dev \
    librsvg2-dev \
    libxi-dev \
    libglu1-mesa-dev \
    libglew-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy package files first for better Docker layer caching
COPY package*.json ./

# Update npm to latest version and install dependencies
# Fix SSL/TLS cipher issues with environment variables and optimize for native compilation
ENV NPM_CONFIG_STRICT_SSL=false
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false
ENV NPM_CONFIG_MAXSOCKETS=1
ENV NPM_CONFIG_LEGACY_PEER_DEPS=true
ENV PYTHON=/usr/bin/python3
ENV MAKE=make
ENV CXX=g++
ENV CC=gcc

# Increase memory allocation for node during npm install and add timeout
# Use a two-stage approach: try npm ci first, fallback to npm install if it fails
RUN npm install -g npm@10 && \
    (NODE_OPTIONS="--max-old-space-size=4096" npm ci --legacy-peer-deps --no-audit --no-fund --timeout=600000 || \
     NODE_OPTIONS="--max-old-space-size=4096" npm install --legacy-peer-deps --no-audit --no-fund --timeout=600000) && \
    npm cache clean --force

# Create necessary directories with proper permissions
RUN mkdir -p uploads uploads/temp data build build/public dist && \
    chmod 755 uploads uploads/temp data build build/public dist

# Copy source files (this layer changes most frequently)
COPY . .

# Make start script executable with full permissions and ensure proper ownership
RUN chmod 755 start.sh && chown root:root start.sh && ls -la start.sh

# Build arguments for Firebase environment variables with defaults
ARG VITE_FIREBASE_API_KEY=placeholder-api-key
ARG VITE_FIREBASE_AUTH_DOMAIN=placeholder.firebaseapp.com
ARG VITE_FIREBASE_PROJECT_ID=placeholder-project
ARG VITE_FIREBASE_STORAGE_BUCKET=placeholder.appspot.com
ARG VITE_FIREBASE_MESSAGING_SENDER_ID=123456789
ARG VITE_FIREBASE_APP_ID=1:123456789:web:abcdef

# Set environment variables for build process
ENV RAILWAY_ENVIRONMENT=true
ENV VITE_FIREBASE_API_KEY=$VITE_FIREBASE_API_KEY
ENV VITE_FIREBASE_AUTH_DOMAIN=$VITE_FIREBASE_AUTH_DOMAIN
ENV VITE_FIREBASE_PROJECT_ID=$VITE_FIREBASE_PROJECT_ID
ENV VITE_FIREBASE_STORAGE_BUCKET=$VITE_FIREBASE_STORAGE_BUCKET
ENV VITE_FIREBASE_MESSAGING_SENDER_ID=$VITE_FIREBASE_MESSAGING_SENDER_ID
ENV VITE_FIREBASE_APP_ID=$VITE_FIREBASE_APP_ID

# Build the application with environment variables available
RUN npm run build

# Copy SQL migration files (not bundled by esbuild)
COPY server/migrations/ /app/build/migrations/
RUN ls -la /app/build/ && echo "Build completed successfully"

# WORKAROUND: Create redirect script for Railway's hardcoded start command
RUN mkdir -p /app/dist && \
    echo '#!/usr/bin/env node' > /app/dist/index.js && \
    echo '' >> /app/dist/index.js && \
    echo 'console.log("🚂 Railway is running /app/dist/index.js - redirecting to actual app...");' >> /app/dist/index.js && \
    echo 'console.log("Working directory:", process.cwd());' >> /app/dist/index.js && \
    echo 'console.log("Node.js version:", process.version);' >> /app/dist/index.js && \
    echo '' >> /app/dist/index.js && \
    echo 'import { existsSync, readdirSync } from "fs";' >> /app/dist/index.js && \
    echo 'import { spawn } from "child_process";' >> /app/dist/index.js && \
    echo '' >> /app/dist/index.js && \
    echo 'function startApp() {' >> /app/dist/index.js && \
    echo '  const candidates = [' >> /app/dist/index.js && \
    echo '    "/app/build/index.js",' >> /app/dist/index.js && \
    echo '    "/app/server/index.js"' >> /app/dist/index.js && \
    echo '  ];' >> /app/dist/index.js && \
    echo '  ' >> /app/dist/index.js && \
    echo '  for (const candidate of candidates) {' >> /app/dist/index.js && \
    echo '    console.log("Checking:", candidate);' >> /app/dist/index.js && \
    echo '    if (existsSync(candidate)) {' >> /app/dist/index.js && \
    echo '      console.log("✅ Found app at:", candidate);' >> /app/dist/index.js && \
    echo '      console.log("🚀 Starting EvalMatch...");' >> /app/dist/index.js && \
    echo '      ' >> /app/dist/index.js && \
    echo '      const child = spawn("node", [candidate], {' >> /app/dist/index.js && \
    echo '        stdio: "inherit",' >> /app/dist/index.js && \
    echo '        cwd: "/app",' >> /app/dist/index.js && \
    echo '        env: { ...process.env, NODE_OPTIONS: "--max-old-space-size=7168 --max-semi-space-size=256" }' >> /app/dist/index.js && \
    echo '      });' >> /app/dist/index.js && \
    echo '      ' >> /app/dist/index.js && \
    echo '      process.on("SIGTERM", () => child.kill("SIGTERM"));' >> /app/dist/index.js && \
    echo '      process.on("SIGINT", () => child.kill("SIGINT"));' >> /app/dist/index.js && \
    echo '      ' >> /app/dist/index.js && \
    echo '      child.on("exit", (code) => process.exit(code || 0));' >> /app/dist/index.js && \
    echo '      return;' >> /app/dist/index.js && \
    echo '    }' >> /app/dist/index.js && \
    echo '  }' >> /app/dist/index.js && \
    echo '  ' >> /app/dist/index.js && \
    echo '  console.log("❌ No app found. Available files:");' >> /app/dist/index.js && \
    echo '  readdirSync("/app").forEach(f => console.log(" -", f));' >> /app/dist/index.js && \
    echo '  process.exit(1);' >> /app/dist/index.js && \
    echo '}' >> /app/dist/index.js && \
    echo '' >> /app/dist/index.js && \
    echo 'startApp();' >> /app/dist/index.js && \
    chmod +x /app/dist/index.js && \
    echo "Created Railway redirect script"

# Clean up some dev dependencies but keep Vite for potential dynamic imports
RUN npm prune --omit=dev --ignore-scripts && npm install vite

# Set runtime environment variables
ENV NODE_ENV=production
# Don't set PORT - let Railway assign it dynamically

# Enable static file serving - Railway single container
ENV SERVE_STATIC=true

# Production mode - enforce proper authentication
# ENV AUTH_BYPASS_MODE=false  # Commented out - not needed in production

# Minimal required environment variables for Railway deployment
ENV FIREBASE_PROJECT_ID=railway-placeholder
ENV FIREBASE_SERVICE_ACCOUNT_KEY={"type":"service_account","project_id":"railway-placeholder","private_key_id":"placeholder","private_key":"-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPlaceholder\n-----END PRIVATE KEY-----\n","client_email":"placeholder@railway-placeholder.iam.gserviceaccount.com","client_id":"placeholder","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/placeholder%40railway-placeholder.iam.gserviceaccount.com"}
ENV GROQ_API_KEY=placeholder-groq-key-for-railway-testing

# Phase 2 Optimization Settings
ENV ENABLE_LOCAL_EMBEDDINGS=true
ENV EMBEDDING_MODEL=Xenova/all-MiniLM-L6-v2
ENV MAX_CONCURRENT_EMBEDDINGS=3
ENV MAX_TEXT_LENGTH=50000
ENV MIN_ASCII_RATIO=0.8

# Performance and caching optimization
ENV TRANSFORMERS_CACHE=/tmp/transformers_cache
ENV NODE_OPTIONS="--max-old-space-size=7168 --max-semi-space-size=256"

# Create cache directory for AI models
RUN mkdir -p /tmp/transformers_cache && chmod 755 /tmp/transformers_cache

# Expose the port the app runs on (Railway will assign actual port via PORT env var)
EXPOSE 3000

# Add Railway-optimized health check endpoint
# Use PORT environment variable that Railway assigns (defaults to 3000 for local testing)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT:-3000}/api/health/railway || exit 1

# Add curl for health checks and bash for the start script
RUN apt-get update && apt-get install -y curl bash && rm -rf /var/lib/apt/lists/*

# Use shell form to ensure NODE_OPTIONS is applied
CMD ["/bin/bash", "-c", "export NODE_OPTIONS='--max-old-space-size=7168 --max-semi-space-size=256' && /app/start.sh"]