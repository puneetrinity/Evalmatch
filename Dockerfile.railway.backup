# Railway Dockerfile - Nginx + Express in single container
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies (including dev deps for build)
# Use npm ci with memory optimization
RUN npm ci --maxsockets 1 && npm cache clean --force

# Copy source code
COPY . .

# Set Firebase environment variables for build
ARG VITE_FIREBASE_API_KEY
ARG VITE_FIREBASE_AUTH_DOMAIN
ARG VITE_FIREBASE_PROJECT_ID
ARG VITE_FIREBASE_STORAGE_BUCKET
ARG VITE_FIREBASE_MESSAGING_SENDER_ID  
ARG VITE_FIREBASE_APP_ID

ENV VITE_FIREBASE_API_KEY=$VITE_FIREBASE_API_KEY
ENV VITE_FIREBASE_AUTH_DOMAIN=$VITE_FIREBASE_AUTH_DOMAIN
ENV VITE_FIREBASE_PROJECT_ID=$VITE_FIREBASE_PROJECT_ID
ENV VITE_FIREBASE_STORAGE_BUCKET=$VITE_FIREBASE_STORAGE_BUCKET
ENV VITE_FIREBASE_MESSAGING_SENDER_ID=$VITE_FIREBASE_MESSAGING_SENDER_ID
ENV VITE_FIREBASE_APP_ID=$VITE_FIREBASE_APP_ID

# Build the client with environment variables
RUN echo "Build-time environment check:" && \
    echo "VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY:0:10}..." && \
    echo "VITE_FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID}" && \
    npm run build:client

# Build the server
RUN npm run build:server

# Production stage with nginx (Ubuntu-based for onnxruntime compatibility)
FROM nginx:latest

# Install Node.js, supervisor, build tools, and required dependencies
# Split into smaller chunks to reduce memory usage
RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN apt-get update && apt-get install -y \
    --no-install-recommends \
    supervisor \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy nginx configuration
COPY nginx/default.conf /etc/nginx/conf.d/default.conf

# Copy built frontend to nginx html directory
COPY --from=builder /app/dist/public /usr/share/nginx/html

# Set up app directory
WORKDIR /app

# Copy built server, package files, configs, startup scripts, and test data
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/railway-start.sh ./railway-start.sh
COPY --from=builder /app/test ./test
COPY nginx.conf.template ./nginx.conf.template
COPY start-express.sh ./start-express.sh

# Install production dependencies and rebuild native modules for Ubuntu
# Use memory optimization for Railway's limited resources
RUN npm ci --only=production --maxsockets 1 && \
    npm install vite --maxsockets 1 && \
    npm rebuild sharp && \
    npm cache clean --force

# Create supervisor directories and copy config
RUN mkdir -p /etc/supervisor/conf.d /var/log
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Make startup scripts executable
RUN chmod +x ./railway-start.sh ./start-express.sh

# Expose Railway's dynamic port
EXPOSE $PORT

# Start both nginx and Express with supervisor
CMD ["./railway-start.sh"]