name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.19.0'

jobs:
  # Essential checks that must pass
  essential-checks:
    name: Essential Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run ESLint
        run: npm run lint:check
        
      - name: Run TypeScript type checking
        run: npm run check
        
      - name: Check for security vulnerabilities
        run: npm audit --audit-level high

  # Basic integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: essential-checks
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: evalmatch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Setup test database
        run: |
          PGPASSWORD=test_password psql -h localhost -U test_user -d evalmatch_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
          npm run db:push || echo "Database push failed - continuing with existing schema"
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/evalmatch_test
        
      - name: Run working integration tests
        run: |
          npm run test:integration tests/api-integration.test.ts
          npm run test:integration:batch
        env:
          NODE_ENV: test
          CI: true
          AUTH_BYPASS_MODE: true
          DISABLE_EXTERNAL_SERVICES: true
          MOCK_AI_PROVIDERS: true
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/evalmatch_test

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: essential-checks
    
    strategy:
      matrix:
        test-group: ['core', 'business', 'ui']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run unit tests
        run: |
          case "${{ matrix.test-group }}" in
            "core")
              npm run test:unit:core
              ;;
            "business") 
              npm run test:unit:business
              ;;
            "ui")
              npm run test:unit:ui
              ;;
          esac
        env:
          NODE_ENV: test
          CI: true
          AUTH_BYPASS_MODE: true
          DISABLE_EXTERNAL_SERVICES: true
          MOCK_AI_PROVIDERS: true

  # Build verification
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: essential-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

  # Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [essential-checks, integration-tests, build-check]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Generate CI summary
        run: |
          echo "# CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Core Status" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Essential Checks | ${{ needs.essential-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Check | ${{ needs.build-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.essential-checks.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.build-check.result }}" == "success" ]]; then
            echo "## ✅ Core Pipeline Passed!" >> $GITHUB_STEP_SUMMARY
            echo "Essential checks, integration tests, and build verification all passed." >> $GITHUB_STEP_SUMMARY
            echo "The application is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Core Pipeline Issues" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failing checks before deploying." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Set deployment status
        if: github.ref == 'refs/heads/main' && needs.essential-checks.result == 'success' && needs.integration-tests.result == 'success' && needs.build-check.result == 'success'
        run: |
          echo "DEPLOYMENT_READY=true" >> $GITHUB_OUTPUT
          echo "Core pipeline passed - ready for deployment"