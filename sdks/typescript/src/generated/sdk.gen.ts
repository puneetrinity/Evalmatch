// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { PostAnalysisAnalyzeByJobIdData, PostAnalysisAnalyzeByJobIdResponses, PostAnalysisAnalyzeByJobIdErrors, PostAnalysisAnalyzeBiasByJobIdData, PostAnalysisAnalyzeBiasByJobIdResponses, PostAnalysisAnalyzeBiasByJobIdErrors, PostJobDescriptionsData, PostJobDescriptionsResponses, PostJobDescriptionsErrors, GetResumesData, GetResumesResponses, GetResumesErrors, PostResumesData, PostResumesResponses, PostResumesErrors, GetResumesByIdData, GetResumesByIdResponses, GetResumesByIdErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Analyze resumes against job description
 * Perform AI-powered analysis of resumes against a specific job description.
 * Returns matching scores, skill matches, strengths, and improvement areas.
 * Can analyze specific resumes or all user resumes if no IDs provided.
 *
 */
export const postAnalysisAnalyzeByJobId = <ThrowOnError extends boolean = false>(options: Options<PostAnalysisAnalyzeByJobIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAnalysisAnalyzeByJobIdResponses, PostAnalysisAnalyzeByJobIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/analysis/analyze/{jobId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Analyze job description for bias
 * Analyze a job description for potential bias in language, requirements, and tone.
 * Identifies problematic language patterns and provides recommendations for improvement.
 *
 */
export const postAnalysisAnalyzeBiasByJobId = <ThrowOnError extends boolean = false>(options: Options<PostAnalysisAnalyzeBiasByJobIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostAnalysisAnalyzeBiasByJobIdResponses, PostAnalysisAnalyzeBiasByJobIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/analysis/analyze-bias/{jobId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new job description
 * Create a new job description with automatic AI analysis to extract skills,
 * requirements, and experience levels. The job description is immediately
 * analyzed to enable efficient candidate matching.
 *
 */
export const postJobDescriptions = <ThrowOnError extends boolean = false>(options: Options<PostJobDescriptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostJobDescriptionsResponses, PostJobDescriptionsErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/job-descriptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all resumes for authenticated user
 * Retrieve all resumes uploaded by the authenticated user with optional filtering and pagination.
 * Supports filtering by file type, analysis status, session, and batch.
 *
 */
export const getResumes = <ThrowOnError extends boolean = false>(options?: Options<GetResumesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResumesResponses, GetResumesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/resumes',
        ...options
    });
};

/**
 * Upload a resume
 * Upload a resume file for processing and analysis. Supports PDF, DOCX, and TXT formats.
 * Files are automatically processed and analyzed unless explicitly disabled.
 *
 */
export const postResumes = <ThrowOnError extends boolean = false>(options: Options<PostResumesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostResumesResponses, PostResumesErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/resumes',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get specific resume by ID
 * Retrieve a specific resume by its ID. Only the owner of the resume can access it.
 * Returns full resume details including extracted content.
 *
 */
export const getResumesById = <ThrowOnError extends boolean = false>(options: Options<GetResumesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetResumesByIdResponses, GetResumesByIdErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/resumes/{id}',
        ...options
    });
};