// This file is auto-generated by @hey-api/openapi-ts

export type ApiResponse = {
    success: boolean;
    /**
     * Response data (varies by endpoint)
     */
    data?: {
        [key: string]: unknown;
    };
    timestamp: string;
};

export type ApiError = {
    success: boolean;
    error: {
        code: string;
        message: string;
        /**
         * Additional error details
         */
        details?: {
            [key: string]: unknown;
        };
    };
    timestamp: string;
};

export type Resume = {
    id: number;
    filename: string;
    originalName?: string;
    /**
     * Extracted text content from the resume
     */
    content?: string;
    /**
     * File size in bytes
     */
    fileSize?: number;
    mimeType?: string;
    status: 'uploaded' | 'processing' | 'analyzed' | 'error';
    uploadedAt: string;
    /**
     * Firebase user ID
     */
    userId: string;
};

export type JobDescription = {
    id: number;
    title: string;
    /**
     * Full job description text
     */
    description: string;
    requirements?: Array<string>;
    location?: string;
    employmentType?: 'full-time' | 'part-time' | 'contract' | 'freelance';
    salaryRange?: {
        min?: number;
        max?: number;
        currency?: string;
    };
    createdAt: string;
    /**
     * Firebase user ID
     */
    userId: string;
};

export type AnalysisResult = {
    id: number;
    resumeId: number;
    jobId: number;
    /**
     * Overall matching score (0-100)
     */
    overallScore: number;
    /**
     * AI confidence in the analysis (0-100)
     */
    confidenceScore: number;
    strengths?: Array<string>;
    improvements?: Array<string>;
    skillsMatch?: {
        matched?: Array<string>;
        missing?: Array<string>;
        score?: number;
    };
    experienceMatch?: {
        yearsRequired?: number;
        yearsCandidate?: number;
        score?: number;
    };
    analyzedAt: string;
};

export type BiasAnalysis = {
    jobId: number;
    /**
     * Lower scores indicate less bias (0-100)
     */
    overallBiasScore: number;
    biasCategories: Array<{
        category?: 'gender' | 'age' | 'race' | 'disability' | 'education' | 'other';
        score?: number;
        examples?: Array<string>;
    }>;
    suggestions?: Array<string>;
    analyzedAt: string;
};

export type InterviewQuestions = {
    resumeId: number;
    jobId: number;
    questions: Array<{
        question?: string;
        category?: 'technical' | 'behavioral' | 'situational' | 'experience';
        difficulty?: 'beginner' | 'intermediate' | 'advanced';
        reasoning?: string;
    }>;
    generatedAt: string;
};

export type AnalysisRequest = {
    /**
     * Array of resume IDs to analyze (optional - if not provided, analyzes all user resumes)
     */
    resumeIds?: Array<number>;
    /**
     * Optional session ID for grouping
     */
    sessionId?: string;
    /**
     * Optional batch ID for bulk operations
     */
    batchId?: string;
};

export type BiasAnalysisRequest = {
    /**
     * Include bias reduction recommendations
     */
    includeRecommendations?: boolean;
};

export type JobDescriptionInput = {
    title: string;
    description: string;
    requirements?: Array<string>;
};

export type JobListResponse = ApiResponse & {
    data?: {
        jobs?: Array<JobDescription>;
        pagination?: {
            page?: number;
            limit?: number;
            total?: number;
            totalPages?: number;
        };
    };
};

export type ResumeListResponse = ApiResponse & {
    data?: {
        resumes?: Array<Resume>;
        pagination?: {
            page?: number;
            limit?: number;
            total?: number;
            totalPages?: number;
        };
    };
};

/**
 * Resume ID
 */
export type ResumeId = number;

/**
 * Job description ID
 */
export type JobId = number;

/**
 * Job description ID
 */
export type JobIdParam = number;

/**
 * Resume ID
 */
export type ResumeIdParam = number;

export type PostAnalysisAnalyzeByJobIdData = {
    body?: AnalysisRequest;
    path: {
        /**
         * Job description ID
         */
        jobId: number;
    };
    query?: never;
    url: '/analysis/analyze/{jobId}';
};

export type PostAnalysisAnalyzeByJobIdErrors = {
    /**
     * Invalid job ID or request data
     */
    400: ApiError;
    /**
     * Authentication required
     */
    401: ApiError;
    /**
     * Job description not found
     */
    404: ApiError;
    /**
     * Internal server error
     */
    500: ApiError;
};

export type PostAnalysisAnalyzeByJobIdError = PostAnalysisAnalyzeByJobIdErrors[keyof PostAnalysisAnalyzeByJobIdErrors];

export type PostAnalysisAnalyzeByJobIdResponses = {
    /**
     * Analysis completed successfully
     */
    200: ApiResponse & {
        analysisId?: number;
        jobId?: number;
        results?: Array<AnalysisResult>;
    };
};

export type PostAnalysisAnalyzeByJobIdResponse = PostAnalysisAnalyzeByJobIdResponses[keyof PostAnalysisAnalyzeByJobIdResponses];

export type PostAnalysisAnalyzeBiasByJobIdData = {
    body?: BiasAnalysisRequest;
    path: {
        /**
         * Job description ID
         */
        jobId: number;
    };
    query?: never;
    url: '/analysis/analyze-bias/{jobId}';
};

export type PostAnalysisAnalyzeBiasByJobIdErrors = {
    /**
     * Invalid job ID
     */
    400: ApiError;
    /**
     * Authentication required
     */
    401: ApiError;
    /**
     * Job description not found
     */
    404: ApiError;
    /**
     * Internal server error
     */
    500: ApiError;
};

export type PostAnalysisAnalyzeBiasByJobIdError = PostAnalysisAnalyzeBiasByJobIdErrors[keyof PostAnalysisAnalyzeBiasByJobIdErrors];

export type PostAnalysisAnalyzeBiasByJobIdResponses = {
    /**
     * Bias analysis completed successfully
     */
    200: ApiResponse & {
        data?: BiasAnalysis;
    };
};

export type PostAnalysisAnalyzeBiasByJobIdResponse = PostAnalysisAnalyzeBiasByJobIdResponses[keyof PostAnalysisAnalyzeBiasByJobIdResponses];

export type PostJobDescriptionsData = {
    body: JobDescriptionInput;
    path?: never;
    query?: never;
    url: '/job-descriptions';
};

export type PostJobDescriptionsErrors = {
    /**
     * Invalid input data
     */
    400: ApiError;
    /**
     * Authentication required
     */
    401: ApiError;
    /**
     * Internal server error
     */
    500: ApiError;
};

export type PostJobDescriptionsError = PostJobDescriptionsErrors[keyof PostJobDescriptionsErrors];

export type PostJobDescriptionsResponses = {
    /**
     * Job description created successfully
     */
    200: ApiResponse & {
        data?: {
            jobDescription?: JobDescription & {
                skills?: Array<string>;
                /**
                 * AI analysis results
                 */
                analyzedData?: {
                    [key: string]: unknown;
                };
            };
            analysis?: {
                skillsExtracted?: number;
                requirementsFound?: number;
                experienceLevel?: string;
            };
            /**
             * Analysis processing time in milliseconds
             */
            processingTime?: number;
        };
    };
};

export type PostJobDescriptionsResponse = PostJobDescriptionsResponses[keyof PostJobDescriptionsResponses];

export type GetResumesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number for pagination
         */
        page?: number;
        /**
         * Number of resumes per page
         */
        limit?: number;
        /**
         * Filter by file type
         */
        fileType?: 'pdf' | 'docx' | 'txt';
        /**
         * Filter by analysis status
         */
        hasAnalysis?: boolean;
        /**
         * Filter by session ID
         */
        sessionId?: string;
        /**
         * Filter by batch ID
         */
        batchId?: string;
    };
    url: '/resumes';
};

export type GetResumesErrors = {
    /**
     * Authentication required
     */
    401: ApiError;
    /**
     * Rate limit exceeded
     */
    429: ApiError;
    /**
     * Internal server error
     */
    500: ApiError;
};

export type GetResumesError = GetResumesErrors[keyof GetResumesErrors];

export type GetResumesResponses = {
    /**
     * Resumes retrieved successfully
     */
    200: ResumeListResponse;
};

export type GetResumesResponse = GetResumesResponses[keyof GetResumesResponses];

export type PostResumesData = {
    body: {
        /**
         * Resume file (PDF, DOCX, or TXT)
         */
        file: Blob | File;
        /**
         * Optional session identifier for grouping uploads
         */
        sessionId?: string;
        /**
         * Optional batch identifier for bulk operations
         */
        batchId?: string;
        /**
         * Whether to automatically analyze the resume after upload
         */
        autoAnalyze?: boolean;
    };
    path?: never;
    query?: never;
    url: '/resumes';
};

export type PostResumesErrors = {
    /**
     * Invalid file or validation error
     */
    400: ApiError;
    /**
     * Authentication required
     */
    401: ApiError;
    /**
     * File too large
     */
    413: ApiError;
    /**
     * Rate limit exceeded
     */
    429: ApiError;
    /**
     * Internal server error
     */
    500: ApiError;
};

export type PostResumesError = PostResumesErrors[keyof PostResumesErrors];

export type PostResumesResponses = {
    /**
     * Resume uploaded successfully
     */
    200: ApiResponse & {
        data?: {
            resume?: Resume;
            processing?: {
                contentExtracted?: boolean;
                analysisStarted?: boolean;
                estimatedTime?: string;
            };
        };
    };
};

export type PostResumesResponse = PostResumesResponses[keyof PostResumesResponses];

export type GetResumesByIdData = {
    body?: never;
    path: {
        /**
         * Resume ID
         */
        id: number;
    };
    query?: never;
    url: '/resumes/{id}';
};

export type GetResumesByIdErrors = {
    /**
     * Validation error
     */
    400: ApiError;
    /**
     * Authentication required
     */
    401: ApiError;
    /**
     * Resume not found
     */
    404: ApiError;
    /**
     * Internal server error
     */
    500: ApiError;
};

export type GetResumesByIdError = GetResumesByIdErrors[keyof GetResumesByIdErrors];

export type GetResumesByIdResponses = {
    /**
     * Resume retrieved successfully
     */
    200: ApiResponse & {
        data?: {
            resume?: Resume;
        };
    };
};

export type GetResumesByIdResponse = GetResumesByIdResponses[keyof GetResumesByIdResponses];

export type ClientOptions = {
    baseURL: 'https://evalmatch.app/api' | 'https://recruitment-corner.scholavar.com/api' | 'http://localhost:3000/api' | (string & {});
};